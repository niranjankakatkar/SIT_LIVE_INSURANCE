'use client'
import { useState, useEffect, useCallback } from 'react';

interface ApiRequestResult<T> {
  data: T | null;
  error: Error | null;
  isLoading: boolean;
}

interface ApiRequestOptions<T> extends RequestInit {
  payload?: T;
  queryParams?: { [key: string]: string };
  token?: string;
}

const useApiRequestWithAuth = <T>(
  url: string,
  options: ApiRequestOptions<T> = {}
): ApiRequestResult<T> => {
  const [data, setData] = useState<T | null>(null);
  const [error, setError] = useState<Error | null | any>(null);
  const [isLoading, setLoading] = useState(true);
  const { token } = options;

  const fetchWithToken = useCallback(
    async () => {
      const headers = new Headers();

      if (token) {
        headers.append('Authorization', `${token}`);
      }

      if (options.headers) {
        for (const [key, value] of Object.entries(options.headers)) {
          headers.append(key, value);
        }
      }

      const queryParams = new URLSearchParams(options.queryParams);

      try {
        const response = await fetch(`${url}?${queryParams}`, {
          method: options.method || 'GET',
          headers,
          body: options.payload ? JSON.stringify(options.payload) : undefined,
        });

        if (!response.ok) {
          throw new Error(`Request failed with status: ${response.status}`);
        }

        const responseData: T = await response.json();
        setData(responseData);
      } catch (err) {
        setError(err);
      } finally {
        setLoading(false);
      }
    },
    [url, options, token]
  );

  useEffect(() => {
    fetchWithToken();
  }, [fetchWithToken]);

  return { data, error, isLoading };
};

export default useApiRequestWithAuth;
